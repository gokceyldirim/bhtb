import hashlibimport jsonfrom datetime import datetimeclass Block:        def __init__(self,timestamp,amount,distance,dilated_time,transaction_type,reward,prev_block_hash=""):                self.timestamp=timestamp        self.amount=amount        self.distance=distance        self.dilated_time=dilated_time        self.transaction_type=transaction_type        self.reward=reward        self.prev_block_hash=prev_block_hash        self.nonce=0        self.hash=self.calculate_hash()                    def calculate_hash(self):                block_data = {        "timestamp": self.timestamp,        "amount": self.amount,        "distance": self.distance,        "dilated_time": self.dilated_time,        "transaction_type": self.transaction_type,        "reward": self.reward,        "prev_block_hash": self.prev_block_hash,        "nonce": self.nonce }        block_string = json.dumps(block_data, sort_keys=True)                          return hashlib.sha256(block_string.encode("utf-8")).hexdigest()        def mine_block(self, difficulty=4):        target="0"*difficulty        while not self.hash.startswith(target):            self.nonce+=1            self.hash=self.calculate_hash()                    print(f"Block mined! Nonce: {self.nonce}, Hash: {self.hash}")                 class Blockchain:        def __init__(self):        self.chain=[]        self.create_genesis_block()                            def create_genesis_block(self):                genesis_block=Block(timestamp=datetime.now().strftime(("%Y-%m-%d %H:%M:%S")),amount=0,distance=0,dilated_time=0,transaction_type="Genesis",reward=10,prev_block_hash=None)                self.chain.append(genesis_block)        print("Genesis block created!")            def add_block(self,amount,distance,dilated_time,transaction_type,reward):        prev_block_hash=self.chain[-1].hash        new_block=Block(timestamp=datetime.now().strftime(("%Y-%m-%d %H:%M:%S")),amount=amount,distance=distance,dilated_time=dilated_time,transaction_type=transaction_type,reward=reward,prev_block_hash=prev_block_hash)                        new_block.mine_block()        self.chain.append(new_block)                                print(f"Block added with hash: {new_block.hash}")                            def is_chain_valid(self):                for i in range(1,len(self.chain)):            current_block=self.chain[i]            previous_block=self.chain[i-1]                        if current_block.prev_block_hash!= previous_block.hash:                print(f"Block {i} is not properly linked to the previous block!")                return False                        if current_block.calculate_hash() != current_block.hash:                print(f"Blockchain Invalid! Block {i} has been tampered with.")                return False                               print("Blockchain is valid.")         return True                                def display_blockchain(self):        """Prints the entire blockchain in a readable format."""        print("\nðŸ“œ Blockchain Explorer:")        for i, block in enumerate(self.chain):            print(f"ðŸ”¹ Block {i}")            print(f"   Timestamp: {block.timestamp}")            print(f"   Transaction Type: {block.transaction_type}")            print(f"   Amount: {block.amount}, Distance: {block.distance}, Dilated Time: {block.dilated_time}")            print(f"   Previous Hash: {block.prev_block_hash}")            print(f"   Hash: {block.hash}")            print("---------------------------------------------------------")                                           blockchain = Blockchain()print(f"Genesis Block Hash: {blockchain.chain[0].hash}")     blockchain.add_block(amount=100, distance=500000, dilated_time=98.5,transaction_type= "Deposit", reward=10)blockchain.add_block(amount=200, distance=1000000, dilated_time=97.8, transaction_type= "Withdrawal",reward=10)for block in blockchain.chain:    print(f"Timestamp: {block.timestamp}, Amount: {block.amount}, Distance: {block.distance}, Dilated Time: {block.dilated_time}, Transaction Type: {block.transaction_type}, Block Hash: {block.hash}, Prev Block Hash: {block.prev_block_hash}")print(blockchain.is_chain_valid())blockchain.display_blockchain()   