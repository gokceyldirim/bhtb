"""A deposit/withdrawal system that allows players to deposit "time coins". The deposit amount will be modified by the time dilation formula based on how close they are to the black hole. amount: The time the player wants to deposit/withdrawal (this will be treated as original_time in the calculation).distance: The distance from the black hole.mass: The mass of the black hole."""from time_dilation import calculate_time_dilationfrom database import save_deposit_to_csvfrom database import save_withdraw_to_csvfrom database import sum_depositsfrom database import sum_withdrawalsfrom blockchain import Blockchainblockchain=Blockchain()def deposit_time(amount,distance,mass:10e30):    adjusted_time= calculate_time_dilation(mass, distance, amount)    print(f"Deposited {amount} units of time at {distance} meters.")    print(f"Adjusted time after time dilation: {adjusted_time} units of time.")            save_deposit_to_csv(amount, distance, adjusted_time)    blockchain.add_block(amount, distance, adjusted_time, "Deposit",reward=10)        def withdraw_time(amount,distance,mass:10e30):        total_deposit= sum_deposits()    total_withdrawal= sum_withdrawals()        if total_deposit-total_withdrawal>=amount:                    adjusted_withdrawal= calculate_time_dilation(mass, distance, amount)        print(f"Withdrew {amount} units of time at {distance} meters.")        print(f"Adjusted time after time dilation: {adjusted_withdrawal} units of time.")                         save_withdraw_to_csv(amount, distance, adjusted_withdrawal)        blockchain.add_block(amount, distance, adjusted_withdrawal, "Withdrawal")            else:               print("Error: Insufficient balance for withdrawal.")                         deposit_time(100, 500000, 10e30)deposit_time(200, 1000000, 10e30)for block in blockchain.chain:    print(f"Block Hash: {block.hash}, Prev: {block.prev_block_hash}")print("\nBlockchain Validity:", blockchain.is_chain_valid())