import tkinter as tkfrom tkinter import ttk, messageboxfrom blockchain import Blockchainfrom time_dilation import calculate_time_dilationfrom database import save_deposit_to_csvfrom database import save_withdraw_to_csvblockchain = Blockchain()balance = 0.0def add_transaction(transaction_type):    global balance        amount_str = amount_entry.get()    distance_str = distance_entry.get()    if not amount_str or not distance_str:        status_label.config(text="Please enter valid values!", fg="red")        return    try:        amount = float(amount_str)                distance = float(distance_str)                    except ValueError:        status_label.config(text="Invalid input!", fg="red")        return        try:        mass=10e30        dilated_time = calculate_time_dilation(mass, distance, amount)    except ValueError as e:        status_label.config(        text=f"Invalid physics parameters: {e}",        fg="red"    )        return        if transaction_type == "Withdrawal":        if dilated_time > balance:            messagebox.showwarning(                "Insufficient Funds",                f"Cannot withdraw {amount:.2f}. Your balance is only {balance:.2f}."            )            return        balance -= dilated_time                save_withdraw_to_csv(amount=amount,        distance=distance,        dilated_time=dilated_time)            else:        balance += dilated_time                save_deposit_to_csv(amount=amount,        distance=distance,        dilated_time=dilated_time)           balance_label.config(text=f"Balance: {balance:.2f}")      blockchain.add_block(        amount=amount,        distance=distance,        dilated_time=dilated_time,        transaction_type=transaction_type,        reward=10    )    update_blockchain_display()    status_label.config(        text=f"{transaction_type} of {amount:.2f} completed! (Dilated time: {dilated_time:.2f})",        fg="green"    )                def update_blockchain_display():    for row in table.get_children():        table.delete(row)    for block in blockchain.chain:        table.insert(            "",            "end",            values=(                f"{block.amount:.2f}",                f"{block.distance:.2f}",                f"{block.dilated_time:.2f}",                block.transaction_type,                block.hash            )        )root = tk.Tk()root.title("Black Hole Time Bank")root.geometry("750x550")root.configure(bg="#121212")tk.Label(root, text="Black Hole Time Bank", font=("Helvetica", 16, "bold"),         fg="white", bg="#121212").pack(pady=10)balance_label = tk.Label(root, text=f"Balance: {balance:.2f}",                         font=("Helvetica", 14), fg="white", bg="#121212")balance_label.pack(pady=5)frame = tk.Frame(root, bg="#121212")frame.pack(pady=10)tk.Label(frame, text="Amount:", fg="black", bg="#121212")\    .grid(row=0, column=0, padx=5, pady=5, sticky="e")amount_entry = tk.Entry(frame, width=20)amount_entry.grid(row=0, column=1, padx=5, pady=5)tk.Label(frame, text="Distance:", fg="black", bg="#121212")\    .grid(row=1, column=0, padx=5, pady=5, sticky="e")distance_entry = tk.Entry(frame, width=20)distance_entry.grid(row=1, column=1, padx=5, pady=5)btn_frame = tk.Frame(root, bg="#121212")btn_frame.pack(pady=5)tk.Button(btn_frame, text="Deposit", width=12,          bg="#3a3a3a", fg="black",          command=lambda: add_transaction("Deposit"))\    .grid(row=0, column=0, padx=10)tk.Button(btn_frame, text="Withdraw", width=12,          bg="#3a3a3a", fg="black",          command=lambda: add_transaction("Withdrawal"))\    .grid(row=0, column=1, padx=10)status_label = tk.Label(root, text="", fg="white", bg="#121212")status_label.pack(pady=5)table_frame = tk.Frame(root, bg="#121212")table_frame.pack(fill="both", expand=True, padx=10, pady=10)columns = ("Amount", "Distance", "Dilated Time", "Type", "Hash")table = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)for col in columns:    table.heading(col, text=col)    table.column(col, width=130, anchor="center")table.pack(side="left", fill="both", expand=True)scroll = ttk.Scrollbar(table_frame, orient="vertical", command=table.yview)table.configure(yscrollcommand=scroll.set)scroll.pack(side="right", fill="y")update_blockchain_display()root.mainloop()